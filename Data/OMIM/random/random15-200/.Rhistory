setwd("Documents/GitHub/NetBAS/NetBAS/Data/OMIM/hallmark/")
knitr::opts_chunk$set(echo = TRUE)
list.file <- read.csv("../../MSigDB.go.pathway/list", header=F, stringsAsFactors = F)
#A list of all 50 hallmark gene sets
hallmark.name <- list.file$V1
hallmark.dim <- length(hallmark.name) # 50 sets
hallmark.name # prints all hallmark set names here
pin <- read.csv("../../human.pin.csv", header=T, stringsAsFactors = F)
# the PIN in pairwise format; other networks work in the same way
geneA <- pin$geneA
geneB <- pin$geneB
hhi.dat <- read.csv("hhi.z.csv", header=F, stringsAsFactors = F)
hhi.z <- matrix(unlist(hhi.dat), nrow=hallmark.dim, ncol=hallmark.dim)
colnames(hhi.z) <- hallmark.name
row.names(hhi.z) <-hallmark.name
hhi.z.nodiag <- hhi.z
diag(hhi.z.nodiag) = NA
my_palette <- colorRampPalette(c("blue2", "white", "red2"))(n = 20)
#colors= c(seq(-5,-1.5, length=10), seq(-1.49, 1.49, length=10), seq(1.5,5, length=10))
colors = c(seq(-10,10,length=21))
hhi.z.mat <- as.matrix(hhi.z.nodiag)
hhi.z.net <- graph.adjacency(hhi.z.mat, mode="undirected", weighted=T, diag=F)
library(igraph)
library(gplots)
hhi.z.mat <- as.matrix(hhi.z.nodiag)
hhi.z.net <- graph.adjacency(hhi.z.mat, mode="undirected", weighted=T, diag=F)
summary(hhi.z.net)
gene.count <- read.csv("gene.count.csv", header=T, stringsAsFactors = F)
v.size <- gene.count$gene.number
E(hhi.z.net)$color <- ifelse(E(hhi.z.net)$weight > 0, "red", "blue")
coloring <- E(hhi.z.net)$color
hhi.weight <- ifelse(abs(E(hhi.z.net)$weight) > 10, abs(E(hhi.z.net)$weight), -0.5)
pdf("hhi.z.network.10plus.pdf", height=8, width=8, paper='special')
plot.igraph(hhi.z.net, vertex.label=c(1:50), layout=layout_in_circle,
edge.color = coloring, edge.width=hhi.weight/4, vertex.size=sqrt(v.size)*1.2)
dev.off()
hallmark.matrix <- hhi.z
colnames(hallmark.matrix) <- c(1:50)
row.names(hallmark.matrix) <- c(1:50)
png("hhi.z.heatmap.new3.png", width=12, height=11, res=600, units="in")
heatmap.2(hallmark.matrix, col=my_palette, trace='none', breaks=colors,
key.xlab=NA, key.title="Interaction Z-score Heatmap",
key.ylab=NA, key.xtickfun = NULL, key.ytickfun = NULL,
#srtCol=45, adjCol=c(1,0),
dendrogram = "none",
margins=c(14,18.5), sepwidth=c(0.01,0.01), #symbreaks = TRUE,
sepcolor="grey", colsep=1:hallmark.dim, rowsep=1:hallmark.dim)
#keysize=1, key.par=list(mar=c(2,1,2,2)))
#lmat=rbind( c(0, 3, 4), c(2,1,1.5)), lwid=c(3, 4, 2))
#lmat=rbind(c(5, 4, 2), c(6, 1, 3)), lhei=c(2, 5), lwid=c(1, 10, 1))
dev.off()
png("hhi.z.heatmap.new3.png", width=12, height=11, res=600, units="in")
heatmap.2(hallmark.matrix, col=my_palette, trace='none', breaks=colors,
key.xlab=NA, key.title="Interaction Z-score Heatmap",
key.ylab=NA, key.xtickfun = NULL, key.ytickfun = NULL,
#srtCol=45, adjCol=c(1,0),
dendrogram = "none", Colv=F, Rowv=F,
margins=c(14,18.5), sepwidth=c(0.01,0.01), #symbreaks = TRUE,
sepcolor="grey", colsep=1:hallmark.dim, rowsep=1:hallmark.dim)
#keysize=1, key.par=list(mar=c(2,1,2,2)))
#lmat=rbind( c(0, 3, 4), c(2,1,1.5)), lwid=c(3, 4, 2))
#lmat=rbind(c(5, 4, 2), c(6, 1, 3)), lhei=c(2, 5), lwid=c(1, 10, 1))
dev.off()
png("hhi.z.heatmap.new3.png", width=12, height=11, res=600, units="in")
heatmap.2(hallmark.matrix, col=my_palette, trace='none', breaks=colors,
key.xlab=NA, key.title="Interaction Z-score Heatmap",
key.ylab=NA, key.xtickfun = NULL, key.ytickfun = NULL,
#srtCol=45, adjCol=c(1,0),
dendrogram = "none", Colv=F, Rowv=F, revC=T,
margins=c(14,18.5), sepwidth=c(0.01,0.01), #symbreaks = TRUE,
sepcolor="grey", colsep=1:hallmark.dim, rowsep=1:hallmark.dim)
#keysize=1, key.par=list(mar=c(2,1,2,2)))
#lmat=rbind( c(0, 3, 4), c(2,1,1.5)), lwid=c(3, 4, 2))
#lmat=rbind(c(5, 4, 2), c(6, 1, 3)), lhei=c(2, 5), lwid=c(1, 10, 1))
dev.off()
rdm.list <- c(1:50)
random.dim <- 50
rri.dat <- read.csv("../../random/rri.z.csv", header=F, stringsAsFactors = F)
rri.z <- matrix(unlist(rri.dat), nrow=random.dim, ncol=random.dim)
colnames(rri.z) <- rdm.list
rownames(rri.z) <- rdm.list
setwd("../../random/random15-200")
setwd("../../random/")
getwd()
setwd("../OMIM/random/random15-200/")
list <- c(1:50)
random.dim <- 50
rri.dat <- read.csv("rri.z.csv", header=F, stringsAsFactors = F)
rri.z <- matrix(unlist(rri.dat), nrow=random.dim, ncol=random.dim)
colnames(rri.z) <- list
rownames(rri.z) <- list
my_palette <- colorRampPalette(c("blue2", "white", "red2"))(n = 20)
#colors= c(seq(-5,-1.5, length=10), seq(-1.49, 1.49, length=10), seq(1.5,5, length=10))
colors = c(seq(-10,10,length=21))
png("rri15-200.z.heatmap.new3.png", width=12, height=4, res=600, units="in")
heatmap.2(rri.z, col=my_palette, trace='none', breaks=colors,
key.xlab=NA, key.title="Interaction Z-score Heatmap", key.ylab=NA, key.xtickfun = NULL, key.ytickfun = NULL,
#srtCol=45, adjCol=c(1,0), dendrogram = "both",
Rowv = F, Colv = F, revC=T,
margins=c(14,18.5), sepwidth=c(0.01,0.01), symbreaks = TRUE,
sepcolor="grey", colsep=1:random.dim, rowsep=1:random.dim)
dev.off()
png("rri15-200.z.heatmap.new3.png", width=12, height=11, res=600, units="in")
heatmap.2(rri.z, col=my_palette, trace='none', breaks=colors,
key.xlab=NA, key.title="Interaction Z-score Heatmap", key.ylab=NA, key.xtickfun = NULL, key.ytickfun = NULL,
#srtCol=45, adjCol=c(1,0), dendrogram = "both",
Rowv = F, Colv = F, revC=T,
margins=c(14,18.5), sepwidth=c(0.01,0.01), symbreaks = TRUE,
sepcolor="grey", colsep=1:random.dim, rowsep=1:random.dim)
dev.off()
median(rri.z)
getwd()
setwd("../../hallmark/")
overlap.matrix <- matrix(0, ncol=50, nrow=50)
for (i in 1:50) {
file.name <- paste("../../MSigDB.go.pathway/", hallmark.name[i], "/",
hallmark.name[i], ".csv", sep="")
file.a <- read.csv(file.name, header=T)
list.a <- file.a$gene
for (j in 1:50) {
file.nameb <- paste("../../MSigDB.go.pathway/", hallmark.name[j], "/",
hallmark.name[j], ".csv", sep="")
file.b <- read.csv(file.nameb, header=T)
list.b <- file.b$gene
jac <- length(which(list.a %in% list.b))/length(unique(c(list.a, list.b)))
overlap.matrix[i,j] = overlap.matrix[i,j] + jac
}
}
colnames(overlap.matrix) <- hallmark.name
row.names(overlap.matrix) <- hallmark.name
my_palette <- colorRampPalette(c("white", "red2"))(n = 20)
colors = c(seq(0,0.1,length=21))
median(overlap.matrix)
mean(overlap.matrix)
png("hallmark.jaccard.new3.png", width=12, height=11, res=600, units="in")
heatmap.2(overlap.matrix, col=my_palette, trace='none', breaks=colors,
key.xlab=NA, key.title="Jaccard Index", key.ylab=NA, key.xtickfun = NULL, key.ytickfun = NULL,
srtCol=45, adjCol=c(1,0), dendrogram = "both",
Colv = F, Rowv = F, revC = T,
margins=c(14.5,18), sepwidth=c(0.01,0.01), #symbreaks = TRUE,
sepcolor="grey", colsep=1:50, rowsep=1:50)
dev.off()
colnames(overlap.matrix) <- c(1:50)
row.names(overlap.matrix) <- c(1:50)
png("hallmark.jaccard.new3.png", width=12, height=11, res=600, units="in")
heatmap.2(overlap.matrix, col=my_palette, trace='none', breaks=colors,
key.xlab=NA, key.title="Jaccard Index", key.ylab=NA, key.xtickfun = NULL, key.ytickfun = NULL,
srtCol=45, adjCol=c(1,0), dendrogram = "both",
Colv = F, Rowv = F, revC = T,
margins=c(14.5,18), sepwidth=c(0.01,0.01), #symbreaks = TRUE,
sepcolor="grey", colsep=1:50, rowsep=1:50)
dev.off()
overlap.nodiag <- overlap.matrix
diag(overlap.nodiag) = NA
colnames(overlap.nodiag) <- c(1:50)
row.names(overlap.nodiag) <- c(1:50)
ol.mat <- as.matrix(overlap.nodiag)
ol.net <- graph.adjacency(ol.mat, mode="undirected", weighted=T, diag=F)
E(ol.net)$color <- ifelse(E(ol.net)$weight > 0.01, "red", "blue")
coloring <- E(ol.net)$color
ol.weight <- ifelse(E(ol.net)$weight > 0.05, E(ol.net)$weight, -0.05)
radi <- c()
for (i in 1:50) {
file.name <- paste("../../MSigDB.go.pathway/", hallmark.name[i], "/",
hallmark.name[i], ".csv", sep="")
list.a <- read.csv(file.name, header=T)
radi <- rbind(radi, sqrt(length(list.a$gene)))
}
coords <- layout_in_circle(ol.net)
pdf("hallmark.jaccard.0.05.pdf", height=8, width=8,paper='special')
plot.igraph(ol.net, cex=0.6, layout = coords, #vertex.label=c(1:50),
edge.color = coloring, edge.width=ol.weight*10, vertex.size=sqrt(v.size)*1.2)
dev.off()
pdf("hallmark.jaccard.0.05.pdf", height=8, width=8,paper='special')
plot.igraph(ol.net, cex=0.6, layout = coords, #vertex.label=c(1:50),
edge.color = coloring, edge.width=ol.weight*20, vertex.size=sqrt(v.size)*1.2)
dev.off()
mean(hhi.z)
mean(rri.z)
sd(hhi.z)
sd(rri.z)
mean(hallmark.matrix)
getwd()
quantile(hallmark.matrix)
quantile(hallmark.matrix, probs=(0,1,10))
quantile(hallmark.matrix, probs=c(0,1,0.01))
quantile(hallmark.matrix, probs=c(0,1,10))
quantile(hallmark.matrix, probs=c(0,1,0.1))
quantile(hallmark.matrix, probs=c(0,1,0.5))
quantile(hallmark.matrix, probs=c(0,1,0.95))
quantile(hallmark.matrix, probs=c(0,1,0.9))
length(which(hallmark.matrix > 9.344823))
length(which(hallmark.matrix > 10))
quantile(hallmark.matrix, probs=c(0,1,0.95))
length(which(hallmark.matrix > 13))
quantile(overlap.nodiag, probs=(0,1,0.1))
quantile(overlap.nodiag, probs=c(0,1,0.1))
quantile(overlap.matrix, probs=c(0,1,0.1))
quantile(overlap.matrix, probs=c(0,1,0.9))
quantile(overlap.matrix, probs=c(0,1,0.95))
quantile(overlap.matrix, probs=c(0,1,0.90))
jaccard.top5 <- quantile(overlap.matrix, probs=seq(0,1,20))[20]
jaccard.top5
quantile(overlap.matrix, probs=seq(0,1,20))
quantile(overlap.matrix, probs=seq(0,1,1/20))
jaccard.top5 <- quantile(overlap.matrix, probs=seq(0,1,1/10))[10]
jaccard.top5
jaccard.top10 <- quantile(overlap.matrix, probs=seq(0,1,1/10))[10]
ol.weight <- ifelse(E(ol.net)$weight > jaccard.top10, E(ol.net)$weight, -0.05)
radi <- c()
for (i in 1:50) {
file.name <- paste("../../MSigDB.go.pathway/", hallmark.name[i], "/",
hallmark.name[i], ".csv", sep="")
list.a <- read.csv(file.name, header=T)
radi <- rbind(radi, sqrt(length(list.a$gene)))
}
coords <- layout_in_circle(ol.net)
pdf("hallmark.jaccard.top10.pdf", height=8, width=8,paper='special')
plot.igraph(ol.net, cex=0.6, layout = coords, #vertex.label=c(1:50),
edge.color = coloring, edge.width=ol.weight*10, vertex.size=sqrt(v.size)*1.2)
dev.off()
jaccard.top10
length(E(ol.net)$weight > jaccard.top10)
ol.weight
length(ol.weight > jaccard.top10)
pdf("hallmark.jaccard.top10.pdf", height=8, width=8,paper='special')
plot.igraph(ol.net, cex=0.6, layout = coords, #vertex.label=c(1:50),
edge.color = coloring, edge.width=ol.weight*15, vertex.size=sqrt(v.size)*1.2)
dev.off()
hhi.weight
hhi.z.mat <- as.matrix(hhi.z.nodiag)
hhi.z.net <- graph.adjacency(hhi.z.mat, mode="undirected", weighted=T, diag=F)
summary(hhi.z.net)
hhi.top10 <- quantile(hhi.z.mat, probs=seq(0,1,1/10))[10]
hhi.top10 <- quantile(!is.na(hhi.z.mat), probs=seq(0,1,1/10))[10]
hhi.top10
quantile(!is.na(hhi.z.mat), probs=seq(0,1,1/10))[10]
hhi.z.mat
quantile(hhi.z.mat)
quantile(hhi.z)
hhi.top10 <- quantile(hhi.z, probs=seq(0,1,1/10))[10]
hhi.top10
!is.na(hhi.z.mat)
hhi.z.mat[!is.na(hhi.z.mat)]
hhi.top10 <- quantile(hhi.z.mat[!is.na(hhi.z.mat)], probs=seq(0,1,1/10))[10]
hhi.top10
quantile(hhi.z.mat[!is.na(hhi.z.mat)], probs=seq(0,1,1/10))[10]
quantile(hhi.z.mat[!is.na(hhi.z.mat)], probs=seq(0,1,1/10))
quantile(hhi.z.mat[!is.na(hhi.z.mat)], probs=seq(0,1,1/20))
hhi.z.mat <- as.matrix(hhi.z.nodiag)
hhi.z.net <- graph.adjacency(hhi.z.mat, mode="undirected", weighted=T, diag=F)
summary(hhi.z.net)
gene.count <- read.csv("gene.count.csv", header=T, stringsAsFactors = F)
v.size <- gene.count$gene.number
E(hhi.z.net)$color <- ifelse(E(hhi.z.net)$weight > 0, "red", "blue")
coloring <- E(hhi.z.net)$color
hhi.top5 <- quantile(hhi.z.mat[!is.na(hhi.z.mat)], probs=seq(0,1,1/20))[20]
hhi.bot5 <- quantile(hhi.z.mat[!is.na(hhi.z.mat)], probs=seq(0,1,1/20))[2]
hhi.weight <- ifelse((E(hhi.z.net)$weight > hhi.top5 | E(hhi.z.net)$weight < hhi.bot5) , abs(E(hhi.z.net)$weight), -0.5)
pdf("hhi.z.network.top5.pdf", height=8, width=8, paper='special')
plot.igraph(hhi.z.net, vertex.label=c(1:50), layout=layout_in_circle,
edge.color = coloring, edge.width=hhi.weight/4, vertex.size=sqrt(v.size)*1.2)
dev.off()
ol.mat <- as.matrix(overlap.nodiag)
ol.net <- graph.adjacency(ol.mat, mode="undirected", weighted=T, diag=F)
E(ol.net)$color <- ifelse(E(ol.net)$weight > 0.01, "red", "blue")
coloring <- E(ol.net)$color
jaccard.top5 <- quantile(overlap.matrix, probs=seq(0,1,1/20))[20]
ol.weight <- ifelse(E(ol.net)$weight > jaccard.top5, E(ol.net)$weight, -0.05)
pdf("hallmark.jaccard.top5.pdf", height=8, width=8,paper='special')
plot.igraph(ol.net, cex=0.6, layout = coords, #vertex.label=c(1:50),
edge.color = coloring, edge.width=ol.weight*15, vertex.size=sqrt(v.size)*1.2)
dev.off()
jaccard.top5
ol.mat <- as.matrix(overlap.nodiag)
ol.net <- graph.adjacency(ol.mat, mode="undirected", weighted=T, diag=F)
E(ol.net)$color <- ifelse(E(ol.net)$weight > 0.01, "red", "blue")
coloring <- E(ol.net)$color
jaccard.top5 <- quantile(overlap.matrix, probs=seq(0,1,1/20))[20]
ol.weight <- ifelse(E(ol.net)$weight >= jaccard.top5, E(ol.net)$weight, -0.05)
pdf("hallmark.jaccard.top5.pdf", height=8, width=8,paper='special')
plot.igraph(ol.net, cex=0.6, layout = coords, #vertex.label=c(1:50),
edge.color = coloring, edge.width=ol.weight*15, vertex.size=sqrt(v.size)*1.2)
dev.off()
ol.mat <- as.matrix(overlap.nodiag)
ol.net <- graph.adjacency(ol.mat, mode="undirected", weighted=T, diag=F)
E(ol.net)$color <- ifelse(E(ol.net)$weight > 0.01, "red", "blue")
coloring <- E(ol.net)$color
jaccard.top5 <- quantile(overlap.matrix, probs=seq(0,1,1/20))[20]
ol.weight <- ifelse(E(ol.net)$weight < jaccard.top5, -0.05, E(ol.net)$weight)
pdf("hallmark.jaccard.top5.pdf", height=8, width=8,paper='special')
plot.igraph(ol.net, cex=0.6, layout = coords, #vertex.label=c(1:50),
edge.color = coloring, edge.width=ol.weight*15, vertex.size=sqrt(v.size)*1.2)
dev.off()
setwd("../random/random15-200/")
rri.z.mat <- as.matrix(rri.z)
rri.z.net <- graph.adjacency(rri.z.mat, mode="undirected", weighted=T, diag=F)
rri.z.mat <- as.matrix(rri.z)
diag(rri.z.mat) <- NA
rri.z.net <- graph.adjacency(rri.z.mat, mode="undirected", weighted=T, diag=F)
quantile(rri.z.mat[!is.na(rri.z.mat)], probs=seq(0,1,20))
quantile(rri.z.mat[!is.na(rri.z.mat)], probs=seq(0,1,1/20))
hhi.bot5
hhi.top5
length(which(hallmark.matrix) > 2.0)
length(which(hallmark.matrix > 2.0))
length(which(hallmark.matrix > 5.0))
length(which(hallmark.matrix > 11.76314.0))
length(which(hallmark.matrix > 11.76314))
length(which(hallmark.matrix < -2.0))
length(which(hallmark.matrix < -5.760639))
length(which(overlap.nodiag > 0.1))
length(which(overlap.nodiag >= 0.1))
length(which(overlap.nodiag > 0))
length(which(rri.z.mat) > 2)
length(which(rri.z.mat > 2))
length(which(rri.z.mat < -2))
